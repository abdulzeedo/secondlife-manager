<?php
namespace App\Controller;

use App\Controller\AppController;
use App\Model\Entity\Phone;
use Cake\Event\Event;
use Cake\Event\EventManager;
use Cake\I18n\Date;
use Cake\I18n\Time;
use Cake\ORM\TableRegistry;

/**
 * ItemReturns Controller
 *
 * @property \App\Model\Table\ItemReturnsTable $ItemReturns
 *
 * @method \App\Model\Entity\ItemReturn[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ItemReturnsController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub


    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Phones']
        ];
        $itemReturns = $this->paginate($this->ItemReturns);

        $this->set(compact('itemReturns'));
    }

    /**
     * View method
     *
     * @param string|null $id Item Return id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $itemReturn = $this->ItemReturns->get($id, [
            'contain' => ['Phones', 'ItemReturnsTypes', 'exchanged_with_item']
        ]);

        $this->set('itemReturn', $itemReturn);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $itemReturn = $this->ItemReturns->newEntity();
        if ($this->request->is('post')) {
            $itemReturn = $this->ItemReturns->patchEntity($itemReturn, $this->request->getData());
            if ($this->ItemReturns->save($itemReturn)) {
                $this->Flash->success(__('The item return has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The item return could not be saved. Please, try again.'));
        }
        $phones = $this->ItemReturns->Phones->find('list', [
            'limit' => 200,
            'keyField' => 'id',
            'valueField' => function(Phone $entity) {
                return $entity->imiei . ' - ' . $entity->label;
            }
        ]);
        $this->set(compact('itemReturn', 'phones'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Item Return id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $this->viewBuilder()->setLayout('bootstrap');
        $itemReturn = $this->ItemReturns->get($id, [
            'contain' => ['Phones', 'exchanged_with_item']
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $itemReturnStatusOrTypeStatus = $this->request->getData('item_returns_status_or_type_id');
            // Only one of the two fields can be non-null at any moment
            // if the value ends with -type-status then replace it
            if (substr($itemReturnStatusOrTypeStatus, 1) === '-type-status') {
                $itemReturn->item_returns_status_id = null;
                $itemReturn->item_returns_type_status_id = str_replace('-type-status', '',
                                                                        $itemReturnStatusOrTypeStatus);
            }
            else {
                $itemReturn->item_returns_type_status_id = null;
                $itemReturn->item_returns_status_id = $itemReturnStatusOrTypeStatus;
            }

            $itemReturn = $this->ItemReturns->patchEntity($itemReturn, $this->request->getData());
            if ($itemReturn->exchanged_with_item_id === '')
                $itemReturn->exchanged_with_item_id = null;
            // Convert string to date object
            $date = new Time($this->request->getData('request_date'), 'Europe/Rome'); // TODO: timezone to user
            $date = $date->timezone('UTC');
            $itemReturn->request_date = $date;

            if ($this->ItemReturns->save($itemReturn)) {
                $this->Flash->success(__('The item return has been saved.'));
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The item return could not be saved. Please, try again.'));
        }
        // Get all the lists from different tables
        $itemReturnsTypes = $this->ItemReturns->ItemReturnsTypes
            ->find('list', ['limit' => 200]);
        $itemReturnsTypeStatus = $this->ItemReturns->ItemReturnsTypeStatus
            ->find('all', ['limit' => 200]);
        $itemReturnsStatus = $this->ItemReturns->ItemReturnsStatus
            ->find('list', ['limit' => 200]);
        $phones = $this->ItemReturns->Phones->find('list', ['limit' => 1])
            ->where(['id' => $itemReturn->item_id]);
        $this->set(compact('itemReturn', 'phones', 'itemReturnsTypes',
                            'itemReturnsTypeStatus', 'itemReturnsStatus'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Item Return id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {

        $this->request->allowMethod(['post', 'delete']);
        $itemReturn = $this->ItemReturns->get($id);
        if ($this->ItemReturns->delete($itemReturn)) {
            if (!$this->request->is('ajax'))
            $this->Flash->success(__('The item return has been deleted.'));
        } else {
            if (!$this->request->is('ajax'))
            $this->Flash->error(__('The item return could not be deleted. Please, try again.'));
        }
        if (!$this->request->is('ajax'))
            return $this->redirect(['action' => 'index']);
        else
            return $this->response = $this->response->withStringBody('');
    }
}
